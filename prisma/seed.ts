import { prisma } from '../src/db'
import { hash } from 'bcrypt'

async function main() {
  const password = await hash('test', 12)
  await prisma.user.upsert({
    where: { username: 'vux' },
    update: {},
    create: {
      username: 'vux',
      password
    }
  })

  const userId = 'ef7cd9e7-91f1-4a61-b8af-a97800b97429' 
  // if need to reset prisma migrate, remember to sign up and then change id in User table to link stats
  const dates = ['4/20/2020', '5/13/2020', '5/30/2020', '6/8/2020', '6/15/2020', '6/19/2020', '6/21/2020', '6/27/2020', '7/5/2020', '7/8/2020', '7/12/2020', '7/15/2020', '7/19/2020', '7/25/2020', '7/27/2020', '7/31/2020', '8/3/2020', '8/7/2020', '8/12/2020', '8/16/2020', '9/5/2020', '9/13/2020', '9/17/2020', '9/25/2020', '9/29/2020', '10/12/2020', '10/21/2020', '11/4/2020', '11/24/2020', '12/7/2020', '12/22/2020', '1/20/2021', '2/11/2021', '2/24/2021', '3/8/2021', '3/26/2021', '4/1/2021', '4/5/2021', '4/12/2021', '4/23/2021', '5/12/2021', '5/17/2021', '5/26/2021', '6/6/2021', '6/9/2021', '6/12/2021', '6/18/2021', '6/26/2021', '6/28/2021', '7/5/2021', '7/10/2021', '7/19/2021', '8/11/2021', '8/27/2021', '9/2/2021', '9/14/2021', '9/28/2021', '10/8/2021', '10/14/2021', '10/25/2021', '11/8/2021', '11/15/2021', '11/26/2021', '12/3/2021', '12/12/2021', '12/14/2021', '12/19/2021', '12/24/2021', '1/17/2022', '2/9/2022', '2/19/2022', '3/7/2022', '3/19/2022', '3/22/2022', '3/29/2022', '4/5/2022', '4/14/2022', '4/28/2022', '5/24/2022', '6/1/2022', '7/13/2022', '7/21/2022', '7/29/2022', '8/5/2022', '8/10/2022', '8/18/2022', '8/26/2022', '9/11/2022', '9/25/2022', '9/25/2022', '10/17/2022', '10/24/2022', '10/30/2022', '11/6/2022', '11/18/2022', '11/26/2022', '12/3/2022', '12/10/2022', '12/27/2022', '1/8/2023', '1/28/2023', '3/11/2023', '3/20/2023', '4/4/2023', '4/20/2023', '5/3/2023', '5/14/2023', '5/26/2023', '6/8/2023', '6/16/2023', '7/14/2023', '7/22/2023']
  const gallons = [9.739, 13.91, 11.31, 12.369, 11.821, 11.03, 10.444, 10.468, 11.554, 8.286, 12.727, 10.029, 8.385, 12.57, 7.931, 8.593, 11.64, 10.0, 10.518, 8.56, 5.443, 12.129, 10.553, 12.878, 9.13, 10.433, 12.035, 11.051, 11.316, 11.531, 10.473, 12.108, 13.002, 11.463, 10.604, 11.848, 12.188, 7.46, 13.693, 10.418, 10.362, 8.222, 10.802, 12.86, 9.044, 12.99, 10.852, 4.0, 13.58, 12.458, 8.163, 13.1, 13.823, 12.426, 8.0, 13.112, 12.362, 13.1, 10.667, 11.0, 11.802, 13.716, 13.7, 10.523, 15.0, 6.0, 11.372, 12.388, 13.112, 14.244, 14.131, 13.999, 11.01, 13.433, 13.01, 12.123, 13.41, 13.711, 11.527, 14.222, 11.02, 13.26, 10.92, 7.657, 10.503, 13.313, 13.923, 13.91, 3.075, 13.012, 13.115, 11.813, 11.911, 14.208, 13.124, 14.34, 10.563, 13.002, 12.464, 12.865, 12.57, 10.608, 11.585, 12.7, 11.024, 9.503, 9.369, 10.826, 11.198, 11.528, 13.539, 12.24]
  const prices = [22.0, 32.81, 27.82, 31.69, 30.72, 29.34, 27.77, 28.04, 30.95, 22.29, 35.24, 28.67, 23.13, 34.71, 21.88, 23.88, 31.9, 28.01, 29.44, 23.97, 15.56, 33.46, 30.59, 35.53, 25.2, 28.78, 33.2, 30.49, 30.32, 30.89, 28.9, 34.37, 39.51, 37.13, 35.62, 40.27, 41.43, 25.38, 46.54, 35.83, 38.91, 29.76, 39.96, 49.37, 33.82, 50.13, 40.58, 16.97, 52.98, 49.32, 31.83, 51.33, 55.28, 48.45, 31.59, 51.91, 48.2, 52.13, 41.59, 47.84, 48.38, 57.04, 57.55, 43.77, 67.49, 24.96, 46.61, 51.52, 55.06, 60.67, 60.04, 71.38, 59.38, 75.21, 72.84, 65.45, 68.65, 72.65, 64.54, 83.33, 59.52, 67.08, 55.7, 38.12, 52.08, 66.29, 68.21, 67.59, 19.37, 67.65, 67.53, 60.23, 59.54, 72.45, 64.29, 63.81, 43.93, 51.99, 47.6, 49.65, 49.76, 47.19, 52.12, 55.87, 49.16, 42.37, 41.21, 48.79, 50.38, 48.41, 58.2, 52.69]
  const mileages = [10041, 10397, 10619, 10885, 11149, 11415, 11669, 11913, 12174, 12378, 12678, 12931, 13145, 13498, 13694, 13901, 14154, 14445, 14708, 14931, 15708, 15992, 16283, 16601, 16871, 17153, 17461, 17748, 18050, 18382, 18666, 18946, 19284, 19603, 19897, 20196, 20547, 20755, 21104, 21405, 21691, 21913, 22200, 22536, 22783, 23153, 23442, 23828, 23941, 24250, 24491, 24843, 25179, 25528, 25761, 26091, 26413, 26730, 27012, 27273, 27537, 27923, 28262, 28530, 28887, 29068, 29409, 29740, 30100, 30502, 30866, 31202, 31515, 31916, 32290, 32631, 32966, 33344, 33860, 34234, 34823, 35241, 35528, 35756, 36041, 36451, 36884, 37227, 37572, 37630, 38138, 38471, 38778, 39152, 39476, 39901, 40241, 40575, 40896, 41254, 41584, 42485, 42827, 43175, 43456, 43719, 43935, 44199, 44507, 44831, 45160, 45530]

  for (let i=0; i<dates.length; i++) {
    await prisma.stats.create({
      data: {
        user: userId,
        createdAt: new Date(dates[i]),
        gallons: gallons[i],
        pricePer: (prices[i] / gallons[i]).toFixed(2),
        total: prices[i],
        mileage: mileages[i]
      }
    })
  }
}

main()
  .then(() => prisma.$disconnect())
  .catch(async (e) => {
    console.error(e)
    await prisma.$disconnect()
    process.exit(1)
  })